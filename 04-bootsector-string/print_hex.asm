;--------------------------------------------------------------------
;
; 	文件名：	print_hex.asm 
;	功能：	输出一个十六进制的数
;	描述：	先定义一个字符串,并初始化为0x0000,把想要输出的十六进制数字
;			进行移位拆解,然后与0x0000的每一位对齐,覆盖0x0000.
;
;--------------------------------------------------------------------
; ASSIC表： 十六进制	|	符号
; 			30H			    0
; 			~			    ~
; 			39H			    9
;           ...(7个符号)	...
;			41H				A
;			~				~
;			5aH				Z
;			...(6个符号)	...
;			61H				a
;			~				~
;			7aH				z
;--------------------------------------------------------------------

print_hex:
	pusha 				; 保存现场, 当前寄存器值入栈
    mov cx, 0			; 给循环变量赋出值

start:
	cmp cx, 4			; 如果cx = 4, 将跳到end处执行
	je end
	
	mov ax, dx			; 将dx中的十六进制数放到ax中
	and ax, 0x000f		; ax中的数与0x000f进行与运算,得到最后一位数字
						; 例如：0x2E4B & 0x000f = 0x000B
number:
	add al, 0x30		; 根据ASSCI表,将al中的值加上0x30H可以得到结果
	cmp al, 0x39		; 若结果 > 0x39H(也即这一位不是数字,是字母)
						; 跳转到uppercase处执行; 若结果 < 0x39H(也即
						; 这一位是数字),跳转到output处执行
	jg uppercase
	jmp output

uppercase:
	add al, 7			; 结果为字母,应当再加上7,因为字母A的ASSCI
						; 是从0x41H开始
output:
	mov bx, HEX_OUT + 5	; 这主要是用来寻址的, 最终得到的HEX_OUT
						; ---------------------
						; | 0 | HEX_OUT+5 | B |
						; ---------------------
						; | 0 | HEX_OUT+4 | 4 |
						; ---------------------
						; | 0 | HEX_OUT+3 | E |
						; ---------------------
						; | 0 | HEX_OUT+2 | 2 |
						; ---------------------
						; | 0 | HEX_OUT+1 | X |
						; ---------------------
						; | 0 | HEX_OUT   | 0 |
						; ---------------------
	sub bx, cx
	mov [bx], al        ; 把移位拆解后的每一位覆盖相对应的0x0000中
	ror dx, 4			; 循环右移4位,也即0x2E4B执行一次后为0x02E4
						; 						执行两次后为0x002E
						;						...
	add cx, 1			; 将循环变量加一,类似c语言的i++
	jmp start			; 跳转到start处,判断下一位

end:
	mov bx, HEX_OUT     ; 调用print_string, 以字符串的形式输出十六进制数
	call print_string

	popa 				; 恢复现场, 保存的寄存器值出战
	ret					; 返回被被调用处

HEX_OUT:				; 定义一个字符串,并以初始化为, 0x0000
	db '0x0000', 0		; 定义这个字符串尾的标志变量0, 当读到0时
						; 字符串读取完毕
